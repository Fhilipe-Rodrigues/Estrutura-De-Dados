package Exe_4;
/**
 *
 * @author FHILIPE
 */

import java.util.Scanner;

public class Exercicio4 {

    /* Classe pilha implementada durante as aulas */  
    private static class PilhaEnc<Tipo> {

        class No {

            private Tipo conteudo;
            private No prox;

            public No() {
                setProx(null);
            }

            public Tipo getConteudo() {
                return conteudo;
            }

            public void setConteudo(Tipo conteudo) {
                this.conteudo = conteudo;
            }

            public No getProx() {
                return prox;
            }

            public void setProx(No prox) {
                this.prox = prox;
            }
        }

        No topo;
        int nElementos;

        public PilhaEnc() {
            topo = null;
            nElementos = 0;
        }

        /**
         * Verifica se a Pilha está vazia
         */
        public boolean vazia() {
            if (nElementos == 0) {
                return true;
            } else {
                return false;
            }
        }

        /**
         * Obtém o tamanho da Pilha
         */
        public int tamanho() {
            return nElementos;

            /*  No p = topo;
	    	int i = 0;
	    	while(p != null){
	       p = p.getProx();
	       i++;
	    }
	    return i;
             */
        }

        /**
         * Consulta o elemento do topo da Pilha Retorna -1 se a pilha estiver vazia.
         */
        public Tipo top() {
            if (vazia()) {
                return null; // Pilha vazia 
            }

            return topo.getConteudo();
        }

        /**
         * Insere um elemento no topo da pilha. Retorna true se a insercao funcionar
         */
        public boolean push(Tipo valor) {

            // Aloca memoria para novo no e preenche conteudo 
            No novoNo = new No();
            novoNo.setConteudo(valor);

            // Faz o novo no apontar pro atual topo da pilha
            novoNo.setProx(topo);

            // Atualiza o topo da pilha que agora sera o novo nó 
            topo = novoNo;

            // Atualiza o tamanho da pilha 
            nElementos++;
            return true;
        }

        /**
         * Retira o elemento do topo da pilha. Retorna -1 se a pilha estiver
         * vazia. Caso contrário retorna o valor removido
         */
        public Tipo pop() {
            if (vazia()) {
                return null; // pilha vazia 
            }
            // Guarda o nó que é topo da pilha e o seu conteudo
            No p = topo;
            Tipo valor = p.getConteudo();

            /* Modifica o topo da pilha para ser o proximo elemento (2o elemento da pilha) */
 /* Isso equivale a retirar o 1o elemento (topo) da pilha */
            topo = p.getProx();

            // Decrementa o tamanho da pilha 
            nElementos--;

            /* sugere ao garbage collector que libere a memoria
	     *  da regiao apontada por p*/
            p = null;

            return valor;
        }
    }

    /* MAIN */
    public static void main(String[] arguments) {
        Scanner entrada = new Scanner(System.in);
        int lin = Integer.parseInt(entrada.nextLine());
        String[] expre = new String[lin];

        for (int i = 0; i < lin; i++) {
            expre[i] = entrada.nextLine();
            PilhaEnc<String> parent_op = new PilhaEnc();
            String notacao_polonesa = "";

            for (int j = 0; j < expre[i].length(); j++) {
                if (expre[i].charAt(j) == '(' || expre[i].charAt(j) == '+'
                    || expre[i].charAt(j) == '-' || expre[i].charAt(j) == '*'
                    || expre[i].charAt(j) == '/' || expre[i].charAt(j) == '^') {

                    char char_posicao = expre[i].charAt(j);
                    String op_ou_parent = String.valueOf(char_posicao);

                    parent_op.push(op_ou_parent);

                } else if (expre[i].charAt(j) == ')') {
                    while (true) {

                        if (parent_op.top().equals("(")) {
                            parent_op.pop();
                            break;

                        } else {
                            notacao_polonesa = notacao_polonesa + parent_op.pop();
                        }
                    }

                } else {
                    char char_posicao = expre[i].charAt(j);
                    String op_ou_parent = String.valueOf(char_posicao);

                    notacao_polonesa = notacao_polonesa + op_ou_parent;
                }

            }

            expre[i] = notacao_polonesa;
        }

        for (int i = 0; i < lin; i++) {
            System.out.println(expre[i]);
        }
    }
}
